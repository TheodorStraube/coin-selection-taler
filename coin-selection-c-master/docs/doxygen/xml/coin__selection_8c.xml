<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="coin__selection_8c" kind="file" language="C++">
    <compoundname>coin_selection.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="coin__selection_8h" local="yes">coin_selection.h</includes>
    <incdepgraph>
      <node id="4">
        <label>coin_selection.h</label>
        <link refid="coin__selection_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>fee.h</label>
        <link refid="fee_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/coin_selection.c</label>
        <link refid="coin__selection_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="coin__selection_8c_1ad508a0e09b59802d933734aff8873139" prot="public" static="yes" mutable="no">
        <type>long long</type>
        <definition>long long nextUniqueId</definition>
        <argsstring></argsstring>
        <name>nextUniqueId</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Global variable to generate unique IDs for coins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="11" column="18" bodyfile="src/coin_selection.c" bodystart="11" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="coin__selection_8c_1aa15dad029d7f70212e3a59f82f91134a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double calculate_coin_score</definition>
        <argsstring>(Coin *coin, long long currentTime, long long maxDenom, long long minDenom)</argsstring>
        <name>calculate_coin_score</name>
        <param>
          <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
          <declname>coin</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>currentTime</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>maxDenom</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>minDenom</declname>
        </param>
        <briefdescription>
<para>Calculate the score of a coin based on its expiration time and denomination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coin</parametername>
</parameternamelist>
<parameterdescription>
<para>The coin whose score is to be calculated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The current time in seconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxDenom</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum denomination value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minDenom</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum denomination value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The calculated score of the coin. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="22" column="8" bodyfile="src/coin_selection.c" bodystart="22" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1ac592f091005f002e7c5fae79f992a9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_creation_time_asc</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_creation_time_asc</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting coins by creation timestamp in ascending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first coin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second coin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first coin&apos;s creation timestamp is less than, equal to, or greater than the second coin&apos;s creation timestamp, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="51" column="5" bodyfile="src/coin_selection.c" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a626327e657784c8ceb4651f040da4cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_denomination_asc</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_denomination_asc</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting denominations in ascending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first denomination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second denomination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first denomination is less than, equal to, or greater than the second denomination, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="65" column="5" bodyfile="src/coin_selection.c" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a1036a502dd36b9da8a2a87565214344a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_denomination_desc_ll</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_denomination_desc_ll</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting denominations in descending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first denomination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second denomination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first denomination is greater than, equal to, or less than the second denomination, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="79" column="5" bodyfile="src/coin_selection.c" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a88214f45e402c7ca47ebffdf63986758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_coin_wrappers</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_coin_wrappers</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting coin wrappers by score in descending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first coin wrapper. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second coin wrapper. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first coin wrapper&apos;s score is less than, equal to, or greater than the second coin wrapper&apos;s score, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="93" column="5" bodyfile="src/coin_selection.c" bodystart="93" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a482817dace668eb4de382025bd19b25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_coins_desc</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_coins_desc</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting coins by denomination amount in descending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first coin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second coin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first coin&apos;s denomination amount is greater than, equal to, or less than the second coin&apos;s denomination amount, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="109" column="5" bodyfile="src/coin_selection.c" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a1de7ca87597054898bfec1d59040986e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_coins_asc</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_coins_asc</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting coins by denomination amount in ascending order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first coin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second coin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first coin&apos;s denomination amount is less than, equal to, or greater than the second coin&apos;s denomination amount, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="123" column="5" bodyfile="src/coin_selection.c" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a5294e9ef80c94f22c1a7c5eae1a070d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_max_bills</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount)</argsstring>
        <name>allocate_max_bills</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet to maximize the number of bills used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="138" column="6" bodyfile="src/coin_selection.c" bodystart="138" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1abdc4e7e106dc926fa4be52552c5eec36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_min_bills</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount)</argsstring>
        <name>allocate_min_bills</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet to minimize the number of bills used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="183" column="6" bodyfile="src/coin_selection.c" bodystart="183" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a5f97bd7e44047737281197553d7b1617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_expiry_time_amount</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_expiry_time_amount</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting coins by expiration time, then by denomination amount. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first coin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second coin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first coin&apos;s expiration time is less than, equal to, or greater than the second coin&apos;s expiration time, respectively. If the expiration times are equal, it compares by denomination amount. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="229" column="5" bodyfile="src/coin_selection.c" bodystart="229" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a680808da9814f743a26fbd7b17f80b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_closest_to_expire_min_bills</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount)</argsstring>
        <name>allocate_closest_to_expire_min_bills</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet that are closest to expiration and minimize the number of bills used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="253" column="6" bodyfile="src/coin_selection.c" bodystart="253" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a150fa1372a0466187c3b1899128a49b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_expiry_time_amount_reverse</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_expiry_time_amount_reverse</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting coins by expiration time, then by denomination amount in reverse order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first coin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second coin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first coin&apos;s expiration time is less than, equal to, or greater than the second coin&apos;s expiration time, respectively. If the expiration times are equal, it compares by denomination amount in reverse order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="307" column="5" bodyfile="src/coin_selection.c" bodystart="307" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a777a127f8296cd032a8fc72b922b9f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_closest_to_expire_max_bills</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount)</argsstring>
        <name>allocate_closest_to_expire_max_bills</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet that are closest to expiration and maximize the number of bills used. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="331" column="6" bodyfile="src/coin_selection.c" bodystart="331" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1af0fe808096de76ae283886fc352d685d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_random_bills</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount)</argsstring>
        <name>allocate_random_bills</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet randomly until the desired amount is reached. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="385" column="6" bodyfile="src/coin_selection.c" bodystart="385" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1ad6cc266b9413050bd1f68baba8439221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_max_bills_time_to_expire_weighted</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount, long long currentTime)</argsstring>
        <name>allocate_max_bills_time_to_expire_weighted</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>currentTime</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet to maximize the number of bills used, weighted by time to expiration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The current time in seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="446" column="6" bodyfile="src/coin_selection.c" bodystart="446" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a1f7d8aad3ce82e856749ff9842b28743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_coins_even_from_min_to_max</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount, Wallet denomination_wallet)</argsstring>
        <name>allocate_coins_even_from_min_to_max</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>denomination_wallet</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet evenly from the smallest to the largest denomination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denomination_wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the denomination information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="504" column="6" bodyfile="src/coin_selection.c" bodystart="504" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1ae2c762869bfa90ebfe4b622be712dfef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_coins_even_from_max_to_min</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount, Wallet denomination_wallet)</argsstring>
        <name>allocate_coins_even_from_max_to_min</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>denomination_wallet</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet evenly from the largest to the smallest denomination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denomination_wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the denomination information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="624" column="6" bodyfile="src/coin_selection.c" bodystart="624" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1aefae3ee8d71fbba6abec7fdc18ecccf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_coins_greedy_min_to_max</definition>
        <argsstring>(Wallet wallet, long long amount, int *num_allocated_coins, long long *allocated_amount, Wallet denomination_wallet)</argsstring>
        <name>allocate_coins_greedy_min_to_max</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>denomination_wallet</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet using a greedy algorithm from the smallest to the largest denomination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denomination_wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the denomination information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="743" column="6" bodyfile="src/coin_selection.c" bodystart="743" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a1e922a1415ccc748661b3e56782c24fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * allocate_coins_for_deposit</definition>
        <argsstring>(Wallet wallet, long long amount, strategy strategy, long long time, int *num_allocated_coins, long long *allocated_amount, Wallet denomination_wallet)</argsstring>
        <name>allocate_coins_for_deposit</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30c" kindref="member">strategy</ref></type>
          <declname>strategy</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_allocated_coins</declname>
        </param>
        <param>
          <type>long long *</type>
          <declname>allocated_amount</declname>
        </param>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>denomination_wallet</declname>
        </param>
        <briefdescription>
<para>Allocate coins from the wallet according to the specified strategy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to allocate. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strategy</parametername>
</parameternamelist>
<parameterdescription>
<para>The strategy to use for allocation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The current time in seconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_allocated_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of allocated coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocated_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the total allocated amount. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denomination_wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the denomination information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of allocated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="874" column="6" bodyfile="src/coin_selection.c" bodystart="874" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a75184a818bb804a53c156d113c6879c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int compare_denomination_desc</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>compare_denomination_desc</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Comparison function for sorting coins in descending order by denomination amount. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the first coin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the second coin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer less than, equal to, or greater than zero if the first coin&apos;s denomination amount is greater than, equal to, or less than the second coin&apos;s denomination amount, respectively. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="907" column="5" bodyfile="src/coin_selection.c" bodystart="907" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a899a7603e11d48d74d216fbb903b9b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
        <definition>Coin * generate_withdraw_coins</definition>
        <argsstring>(long long amount, long long time, Wallet default_wallet, int *num_coins)</argsstring>
        <name>generate_withdraw_coins</name>
        <param>
          <type>long long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>default_wallet</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_coins</declname>
        </param>
        <briefdescription>
<para>Generate coins for withdrawal from the wallet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The target amount to withdraw. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The current time in seconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the default coins for generation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the number of generated coins. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array of generated coins. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="924" column="6" bodyfile="src/coin_selection.c" bodystart="924" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1aa4bd4b6b7bfd44dfece72cf6f6625549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_coins_to_wallet</definition>
        <argsstring>(Wallet *wallet, Coin *coins, int num_coins)</argsstring>
        <name>add_coins_to_wallet</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref> *</type>
          <declname>wallet</declname>
        </param>
        <param>
          <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
          <declname>coins</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_coins</declname>
        </param>
        <briefdescription>
<para>Add coins to the wallet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the wallet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coins</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of coins to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of coins to be added. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="983" column="6" bodyfile="src/coin_selection.c" bodystart="983" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1a77686703b97d1b382b3960ecb14586b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void remove_selected_coins</definition>
        <argsstring>(Wallet *wallet, Coin *coins, int num_coins)</argsstring>
        <name>remove_selected_coins</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref> *</type>
          <declname>wallet</declname>
        </param>
        <param>
          <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
          <declname>coins</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_coins</declname>
        </param>
        <briefdescription>
<para>Remove selected coins from the wallet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the wallet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coins</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of coins to be removed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of coins to be removed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="1028" column="6" bodyfile="src/coin_selection.c" bodystart="1028" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1aed433e9a660b39e8fef92bb5ce8c58f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long calculate_total_fee</definition>
        <argsstring>(Coin *coins, int num_coins, operation_type operation)</argsstring>
        <name>calculate_total_fee</name>
        <param>
          <type><ref refid="struct_coin" kindref="compound">Coin</ref> *</type>
          <declname>coins</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_coins</declname>
        </param>
        <param>
          <type><ref refid="fee_8h_1ad99e62941c8e4b13e5fc45ecaaf65eff" kindref="member">operation_type</ref></type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Calculate the total fee for a set of coins based on the operation type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coins</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_coins</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The total fee for the specified operation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="1081" column="11" bodyfile="src/coin_selection.c" bodystart="1081" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="coin__selection_8c_1ad305e133b0092d3634d69bbe386a00e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long calculate_renew_fee</definition>
        <argsstring>(Wallet wallet, long long time)</argsstring>
        <name>calculate_renew_fee</name>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>wallet</declname>
        </param>
        <param>
          <type>long long</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Calculate the renew fee for the wallet based on the current time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet containing the coins. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The current time in seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The total renew fee for the wallet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/coin_selection.c" line="1113" column="11" bodyfile="src/coin_selection.c" bodystart="1113" bodyend="1126"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Bohdan<sp/>Potuzhnyi<sp/>and<sp/>Vlada<sp/>Svirsh<sp/>on<sp/>04.03.2024.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>coin_selection.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="coin__selection_8h" kindref="compound">coin_selection.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nextUniqueId<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1aa15dad029d7f70212e3a59f82f91134a" kindref="member">calculate_coin_score</ref>(<ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coin,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxDenom,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minDenom)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MAX_SCORE<sp/>=<sp/>100.0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>WEIGHT_TIME<sp/>=<sp/>0.8;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>WEIGHT_DENOM<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>to<sp/>expiration<sp/>score<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeLeft<sp/>=<sp/>(coin-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coin-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref>)<sp/>-<sp/>currentTime;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxTime<sp/>=<sp/>coin-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scoreTime<sp/>=<sp/>MAX_SCORE<sp/>*<sp/>((double)timeLeft<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)maxTime);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Denomination<sp/>score<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normalizedDenom<sp/>=<sp/>(double)(coin-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>-<sp/>minDenom)<sp/>/<sp/>(double)(maxDenom<sp/>-<sp/>minDenom);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>scoreDenom<sp/>=<sp/>MAX_SCORE<sp/>*<sp/>(1.0<sp/>-<sp/>normalizedDenom);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>scores<sp/>with<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>finalScore<sp/>=<sp/>(WEIGHT_TIME<sp/>*<sp/>scoreTime)<sp/>+<sp/>(WEIGHT_DENOM<sp/>*<sp/>scoreDenom);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finalScore;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1ac592f091005f002e7c5fae79f992a9ac" kindref="member">compare_creation_time_asc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinA<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)a;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinB<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)b;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(coinA-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>&gt;<sp/>coinB-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref>)<sp/>-<sp/>(coinA-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>&lt;<sp/>coinB-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a626327e657784c8ceb4651f040da4cd7" kindref="member">compare_denomination_asc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>denomA<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)a;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>denomB<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)b;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(denomA<sp/>&gt;<sp/>denomB)<sp/>-<sp/>(denomA<sp/>&lt;<sp/>denomB);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a1036a502dd36b9da8a2a87565214344a" kindref="member">compare_denomination_desc_ll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>denomA<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)a;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>denomB<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*)b;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(denomB<sp/>&gt;<sp/>denomA)<sp/>-<sp/>(denomB<sp/>&lt;<sp/>denomA);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a88214f45e402c7ca47ebffdf63986758" kindref="member">compare_coin_wrappers</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref><sp/>*wrapperA<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref><sp/>*)a;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref><sp/>*wrapperB<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref><sp/>*)b;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapperA-&gt;<ref refid="structcoin__wrapper_1a538e9c8b56fdfcd2356aaf27dc6703db" kindref="member">score</ref><sp/>&lt;<sp/>wrapperB-&gt;<ref refid="structcoin__wrapper_1a538e9c8b56fdfcd2356aaf27dc6703db" kindref="member">score</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Descending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapperA-&gt;<ref refid="structcoin__wrapper_1a538e9c8b56fdfcd2356aaf27dc6703db" kindref="member">score</ref><sp/>&gt;<sp/>wrapperB-&gt;<ref refid="structcoin__wrapper_1a538e9c8b56fdfcd2356aaf27dc6703db" kindref="member">score</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a482817dace668eb4de382025bd19b25c" kindref="member">compare_coins_desc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinA<sp/>=<sp/>(<ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)a;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinB<sp/>=<sp/>(<ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)b;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>-<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a1de7ca87597054898bfec1d59040986e" kindref="member">compare_coins_asc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinA<sp/>=<sp/>(<ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)a;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinB<sp/>=<sp/>(<ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)b;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>-<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1a5294e9ef80c94f22c1a7c5eae1a070d9" kindref="member">allocate_max_bills</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>coinsCopy<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinsCopy<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coinsCopy[i]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>coins<sp/>in<sp/>descending<sp/>order<sp/>based<sp/>on<sp/>their<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(coinsCopy,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>),<sp/><ref refid="coin__selection_8c_1a482817dace668eb4de382025bd19b25c" kindref="member">compare_coins_desc</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>&amp;&amp;<sp/>amount_collected<sp/>&lt;<sp/>amount;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>+=<sp/>coinsCopy[j].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCount++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>selectedCount;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[k]<sp/>=<sp/>coinsCopy[k];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selectedCoins;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1abdc4e7e106dc926fa4be52552c5eec36" kindref="member">allocate_min_bills</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>coinsCopy<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinsCopy<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coinsCopy[i]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>coins<sp/>in<sp/>descending<sp/>order<sp/>based<sp/>on<sp/>their<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(coinsCopy,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>),<sp/><ref refid="coin__selection_8c_1a1de7ca87597054898bfec1d59040986e" kindref="member">compare_coins_asc</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>&amp;&amp;<sp/>amount_collected<sp/>&lt;<sp/>amount;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>+=<sp/>coinsCopy[j].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCount++;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>selectedCount;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[k]<sp/>=<sp/>coinsCopy[k];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>number<sp/>of<sp/>allocated<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selectedCoins;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a5f97bd7e44047737281197553d7b1617" kindref="member">compare_expiry_time_amount</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinA<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)a;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinB<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)b;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>compare<sp/>by<sp/>expiration<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinA-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>&lt;<sp/>coinB-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinA-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>&gt;<sp/>coinB-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref>)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>expiration<sp/>times<sp/>are<sp/>equal,<sp/>compare<sp/>by<sp/>denomination<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>&gt;<sp/>coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>)<sp/>-<sp/>(coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>&lt;<sp/>coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1a680808da9814f743a26fbd7b17f80b47" kindref="member">allocate_closest_to_expire_min_bills</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>to<sp/>copy<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinsCopy<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinsCopy<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>coins<sp/>from<sp/>the<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coinsCopy[i]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>coins<sp/>by<sp/>expiration<sp/>time,<sp/>then<sp/>by<sp/>amount<sp/>(both<sp/>in<sp/>ascending<sp/>order)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(coinsCopy,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>),<sp/><ref refid="coin__selection_8c_1a5f97bd7e44047737281197553d7b1617" kindref="member">compare_expiry_time_amount</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>&amp;&amp;<sp/>amount_collected<sp/>&lt;<sp/>amount;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&lt;=<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>+=<sp/>coinsCopy[j].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCount++;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>adding<sp/>this<sp/>coin<sp/>exceeds<sp/>the<sp/>amount,<sp/>break<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>selectedCount;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[k]<sp/>=<sp/>coinsCopy[k];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>number<sp/>of<sp/>allocated<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selectedCoins;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>array<sp/>of<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a150fa1372a0466187c3b1899128a49b1" kindref="member">compare_expiry_time_amount_reverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinA<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)a;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinB<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)b;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>compare<sp/>by<sp/>expiration<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinA-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>&lt;<sp/>coinB-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref>)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinA-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>&gt;<sp/>coinB-&gt;<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>+<sp/>coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref>)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>expiration<sp/>times<sp/>are<sp/>equal,<sp/>compare<sp/>by<sp/>denomination<sp/>amount<sp/>in<sp/>reverse<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>&gt;<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>)<sp/>-<sp/>(coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>&lt;<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1a777a127f8296cd032a8fc72b922b9f66" kindref="member">allocate_closest_to_expire_max_bills</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>to<sp/>copy<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinsCopy<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coinsCopy<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>coins<sp/>from<sp/>the<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coinsCopy[i]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>coins<sp/>by<sp/>expiration<sp/>time,<sp/>then<sp/>by<sp/>amount<sp/>in<sp/>reverse<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(coinsCopy,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>),<sp/><ref refid="coin__selection_8c_1a150fa1372a0466187c3b1899128a49b1" kindref="member">compare_expiry_time_amount_reverse</ref>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>&amp;&amp;<sp/>amount_collected<sp/>&lt;<sp/>amount;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&lt;=<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>+=<sp/>coinsCopy[j].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCount++;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>adding<sp/>this<sp/>coin<sp/>exceeds<sp/>the<sp/>amount,<sp/>break<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>selectedCount;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[k]<sp/>=<sp/>coinsCopy[k];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;<sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>number<sp/>of<sp/>allocated<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>free(coinsCopy);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selectedCoins;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>array<sp/>of<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1af0fe808096de76ae283886fc352d685d" kindref="member">allocate_random_bills</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>array<sp/>of<sp/>indices<sp/>representing<sp/>the<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*indices<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indices<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed<sp/>for<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices[i]<sp/>=<sp/>i;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>indices<sp/>with<sp/>the<sp/>coin<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);<sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>to<sp/>store<sp/>potentially<sp/>all<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(indices);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainingCoins<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&lt;<sp/>amount<sp/>&amp;&amp;<sp/>remainingCoins<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randIndex<sp/>=<sp/>rand()<sp/>%<sp/>remainingCoins;<sp/></highlight><highlight class="comment">//<sp/>Pick<sp/>a<sp/>random<sp/>index<sp/>from<sp/>the<sp/>remaining<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCoinIndex<sp/>=<sp/>indices[randIndex];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>selected<sp/>coin<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exceed<sp/>the<sp/>desired<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&lt;=<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>+=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[selectedCoinIndex].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[selectedCount++]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[selectedCoinIndex];</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>selected<sp/>index<sp/>by<sp/>replacing<sp/>it<sp/>with<sp/>the<sp/>last<sp/>available<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices[randIndex]<sp/>=<sp/>indices[remainingCoins<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainingCoins--;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>selectedCoins<sp/>array<sp/>to<sp/>the<sp/>actual<sp/>number<sp/>of<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*finalSelectedCoins<sp/>=<sp/>realloc(selectedCoins,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finalSelectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(indices);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedCoins);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>free(indices);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finalSelectedCoins;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1ad6cc266b9413050bd1f68baba8439221" kindref="member">allocate_max_bills_time_to_expire_weighted</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>currentTime)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref><sp/>*wrappers<sp/>=<sp/>(<ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wrappers)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxDenom<sp/>=<sp/>-100;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>minDenom<sp/>=<sp/>1000000000;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(maxDenom<sp/>&gt;<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>){</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxDenom<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(minDenom<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>){</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minDenom<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>wrappers<sp/>and<sp/>compute<sp/>scores</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrappers[i].<ref refid="structcoin__wrapper_1a674caa9ea24c44eb3af7ab3cf921a5fa" kindref="member">coin</ref><sp/>=<sp/>&amp;wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrappers[i].<ref refid="structcoin__wrapper_1a538e9c8b56fdfcd2356aaf27dc6703db" kindref="member">score</ref><sp/>=<sp/><ref refid="coin__selection_8c_1aa15dad029d7f70212e3a59f82f91134a" kindref="member">calculate_coin_score</ref>(wrappers[i].coin,<sp/>currentTime,<sp/>maxDenom,<sp/>minDenom);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>the<sp/>wrappers<sp/>by<sp/>score<sp/>in<sp/>descending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(wrappers,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcoin__wrapper" kindref="compound">coin_wrapper</ref>),<sp/><ref refid="coin__selection_8c_1a88214f45e402c7ca47ebffdf63986758" kindref="member">compare_coin_wrappers</ref>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>and<sp/>select<sp/>coins<sp/>based<sp/>on<sp/>sorted<sp/>wrappers<sp/>until<sp/>the<sp/>desired<sp/>amount<sp/>is<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>&amp;&amp;<sp/>*allocated_amount<sp/>&lt;<sp/>amount;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*allocated_amount<sp/>+=<sp/>wrappers[i].<ref refid="structcoin__wrapper_1a674caa9ea24c44eb3af7ab3cf921a5fa" kindref="member">coin</ref>-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*num_allocated_coins)++;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins<sp/>and<sp/>copy<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*selectedCoins<sp/>=<sp/>(<ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>(*num_allocated_coins));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!selectedCoins)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(wrappers);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*num_allocated_coins;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[i]<sp/>=<sp/>*wrappers[i].<ref refid="structcoin__wrapper_1a674caa9ea24c44eb3af7ab3cf921a5fa" kindref="member">coin</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>free(wrappers);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>selectedCoins;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1a1f7d8aad3ce82e856749ff9842b28743" kindref="member">allocate_coins_even_from_min_to_max</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount,<sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>denomination_wallet){</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>coins<sp/>in<sp/>the<sp/>wallet<sp/>by<sp/>their<sp/>creation<sp/>timestamp<sp/>in<sp/>ascending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>),<sp/><ref refid="coin__selection_8c_1ac592f091005f002e7c5fae79f992a9ac" kindref="member">compare_creation_time_asc</ref>);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>2D<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_denominations<sp/>=<sp/>denomination_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>**denom_array<sp/>=<sp/>malloc(2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>denom_array[0]<sp/>=<sp/>malloc(num_denominations<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>For<sp/>denominations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>denom_array[1]<sp/>=<sp/>malloc(num_denominations<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>For<sp/>quantities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array[0]<sp/>==<sp/>NULL<sp/>||<sp/>denom_array[1]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>denominations<sp/>from<sp/>the<sp/>denomination<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_denominations;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[0][i]<sp/>=<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>quantity<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>the<sp/>denominations<sp/>in<sp/>ascending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(denom_array[0],<sp/>num_denominations,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/><ref refid="coin__selection_8c_1a626327e657784c8ceb4651f040da4cd7" kindref="member">compare_denomination_asc</ref>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>quantity<sp/>array<sp/>with<sp/>the<sp/>actual<sp/>quantities<sp/>of<sp/>the<sp/>denominations<sp/>from<sp/>the<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_denominations;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>==<sp/>denom_array[0][j])<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][j]++;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*selectedFlags<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);<sp/></highlight><highlight class="comment">//<sp/>Flags<sp/>to<sp/>mark<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedFlags<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedCoins);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedFlags[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>coins<sp/>as<sp/>not<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>coins<sp/>evenly<sp/>from<sp/>the<sp/>smallest<sp/>to<sp/>the<sp/>largest<sp/>denomination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&lt;<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>anyAdded<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_denominations;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array[1][i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[j].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>==<sp/>denom_array[0][i]<sp/>&amp;&amp;<sp/>selectedFlags[j]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[selectedCount++]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[j];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>+=<sp/>denom_array[0][i];</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][i]--;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedFlags[j]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyAdded<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&gt;=<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!anyAdded)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>selectedCoins<sp/>array<sp/>to<sp/>the<sp/>actual<sp/>number<sp/>of<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*finalSelectedCoins<sp/>=<sp/>realloc(selectedCoins,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finalSelectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>realloc<sp/>failed,<sp/>free<sp/>original<sp/>block<sp/>and<sp/>return<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedCoins);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedFlags);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>free(selectedFlags);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finalSelectedCoins;</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1ae2c762869bfa90ebfe4b622be712dfef" kindref="member">allocate_coins_even_from_max_to_min</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount,<sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>denomination_wallet){</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>coins<sp/>in<sp/>the<sp/>wallet<sp/>by<sp/>their<sp/>creation<sp/>timestamp<sp/>in<sp/>ascending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>),<sp/><ref refid="coin__selection_8c_1ac592f091005f002e7c5fae79f992a9ac" kindref="member">compare_creation_time_asc</ref>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>2D<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_denominations<sp/>=<sp/>denomination_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>**denom_array<sp/>=<sp/>malloc(2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>denom_array[0]<sp/>=<sp/>malloc(num_denominations<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>For<sp/>denominations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>denom_array[1]<sp/>=<sp/>malloc(num_denominations<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>For<sp/>quantities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array[0]<sp/>==<sp/>NULL<sp/>||<sp/>denom_array[1]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>denominations<sp/>from<sp/>the<sp/>denomination<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_denominations;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[0][i]<sp/>=<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>quantity<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>the<sp/>denominations<sp/>in<sp/>ascending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(denom_array[0],<sp/>num_denominations,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/><ref refid="coin__selection_8c_1a1036a502dd36b9da8a2a87565214344a" kindref="member">compare_denomination_desc_ll</ref>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>quantity<sp/>array<sp/>with<sp/>the<sp/>actual<sp/>quantities<sp/>of<sp/>the<sp/>denominations<sp/>from<sp/>the<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_denominations;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>==<sp/>denom_array[0][j])<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][j]++;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*selectedFlags<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);<sp/></highlight><highlight class="comment">//<sp/>Flags<sp/>to<sp/>mark<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedFlags<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedCoins);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedFlags[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>coins<sp/>as<sp/>not<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>coins<sp/>evenly<sp/>from<sp/>the<sp/>smallest<sp/>to<sp/>the<sp/>largest<sp/>denomination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&lt;<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>anyAdded<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_denominations;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array[1][i]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[j].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>==<sp/>denom_array[0][i]<sp/>&amp;&amp;<sp/>selectedFlags[j]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[selectedCount++]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[j];</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>+=<sp/>denom_array[0][i];</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][i]--;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedFlags[j]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anyAdded<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&gt;=<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!anyAdded)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>coins<sp/>were<sp/>added<sp/>in<sp/>this<sp/>pass,<sp/>stop<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>selectedCoins<sp/>array<sp/>to<sp/>the<sp/>actual<sp/>number<sp/>of<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*finalSelectedCoins<sp/>=<sp/>realloc(selectedCoins,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finalSelectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>realloc<sp/>failed,<sp/>free<sp/>original<sp/>block<sp/>and<sp/>return<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedCoins);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedFlags);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>free(selectedFlags);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finalSelectedCoins;</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1aefae3ee8d71fbba6abec7fdc18ecccf2" kindref="member">allocate_coins_greedy_min_to_max</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount,<sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>denomination_wallet){</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>coins<sp/>in<sp/>the<sp/>wallet<sp/>by<sp/>their<sp/>creation<sp/>timestamp<sp/>in<sp/>ascending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>,<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>),<sp/><ref refid="coin__selection_8c_1ac592f091005f002e7c5fae79f992a9ac" kindref="member">compare_creation_time_asc</ref>);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>2D<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_denominations<sp/>=<sp/>denomination_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>**denom_array<sp/>=<sp/>malloc(2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>denom_array[0]<sp/>=<sp/>malloc(num_denominations<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>For<sp/>denominations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>denom_array[1]<sp/>=<sp/>malloc(num_denominations<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>For<sp/>quantities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denom_array[0]<sp/>==<sp/>NULL<sp/>||<sp/>denom_array[1]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>malloc<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>denominations<sp/>from<sp/>the<sp/>denomination<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_denominations;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[0][i]<sp/>=<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>quantity<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>the<sp/>denominations<sp/>in<sp/>ascending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(denom_array[0],<sp/>num_denominations,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/><ref refid="coin__selection_8c_1a1036a502dd36b9da8a2a87565214344a" kindref="member">compare_denomination_desc_ll</ref>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>quantity<sp/>array<sp/>with<sp/>the<sp/>actual<sp/>quantities<sp/>of<sp/>the<sp/>denominations<sp/>from<sp/>the<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_denominations;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>==<sp/>denom_array[0][j])<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom_array[1][j]++;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>selectedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount_collected<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*selectedFlags<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);<sp/></highlight><highlight class="comment">//<sp/>Flags<sp/>to<sp/>mark<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedFlags<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedCoins);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedFlags[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>all<sp/>coins<sp/>as<sp/>not<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Greedy<sp/>selection<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(amount_collected<sp/>&lt;<sp/>amount)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>closestAmount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>closestIndex<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>coin<sp/>that<sp/>brings<sp/>us<sp/>closest<sp/>to<sp/>the<sp/>target<sp/>amount<sp/>without<sp/>exceeding<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selectedFlags[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(first){</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closestAmount<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closestIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tempAmount<sp/>=<sp/>amount_collected<sp/>+<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tempAmount<sp/>&lt;=<sp/>amount<sp/>&amp;&amp;<sp/>tempAmount<sp/>&gt;<sp/>closestAmount)<sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closestAmount<sp/>=<sp/>tempAmount;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closestIndex<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>coin<sp/>can<sp/>be<sp/>added<sp/>without<sp/>exceeding<sp/>the<sp/>target,<sp/>break<sp/>the<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(closestIndex<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>the<sp/>coin<sp/>and<sp/>update<sp/>the<sp/>amount<sp/>collected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedCoins[selectedCount++]<sp/>=<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[closestIndex];</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amount_collected<sp/>=<sp/>closestAmount;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selectedFlags[closestIndex]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>*allocated_amount<sp/>=<sp/>amount_collected;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_allocated_coins<sp/>=<sp/>selectedCount;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>selectedCoins<sp/>array<sp/>to<sp/>the<sp/>actual<sp/>number<sp/>of<sp/>selected<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*finalSelectedCoins<sp/>=<sp/>realloc(selectedCoins,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>selectedCount);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(finalSelectedCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>realloc<sp/>failed,<sp/>free<sp/>original<sp/>block<sp/>and<sp/>return<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedCoins);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(selectedFlags);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array[0]);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array[1]);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>free(denom_array);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>free(selectedFlags);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finalSelectedCoins;</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1a1e922a1415ccc748661b3e56782c24fb" kindref="member">allocate_coins_for_deposit</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30c" kindref="member">strategy</ref><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30c" kindref="member">strategy</ref>,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>num_allocated_coins,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>allocated_amount,<sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>denomination_wallet){</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30c" kindref="member">strategy</ref>)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30ca425025383afc09235dbc608bc8e78ec6" kindref="member">MAX_BILLS</ref>:</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a5294e9ef80c94f22c1a7c5eae1a070d9" kindref="member">allocate_max_bills</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30ca62755b4a54145fdfc1f47da1a319bd8b" kindref="member">MIN_BILLS</ref>:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1abdc4e7e106dc926fa4be52552c5eec36" kindref="member">allocate_min_bills</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30ca0671b2aeba566639374b4debb566daf2" kindref="member">CLOSEST_TO_EXPIRE_MIN_BILLS</ref>:</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a680808da9814f743a26fbd7b17f80b47" kindref="member">allocate_closest_to_expire_min_bills</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30ca6a57d650f8ecffdfca51e44cab7658c0" kindref="member">CLOSEST_TO_EXPIRE_MAX_BILLS</ref>:</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a777a127f8296cd032a8fc72b922b9f66" kindref="member">allocate_closest_to_expire_max_bills</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30cab8649294ac33872ee9b958124ec59d36" kindref="member">MAX_BILLS_TIME_TO_EXPIRE_WEIGHTED</ref>:</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1ad6cc266b9413050bd1f68baba8439221" kindref="member">allocate_max_bills_time_to_expire_weighted</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount,<sp/>time);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30caa2b65445a3a16f164c5e811064d75726" kindref="member">RANDOM</ref>:</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1af0fe808096de76ae283886fc352d685d" kindref="member">allocate_random_bills</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30ca1cc82b8275eb97ef4ca5ca363b196d48" kindref="member">EVEN_FROM_MIN_TO_MAX</ref>:</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a1f7d8aad3ce82e856749ff9842b28743" kindref="member">allocate_coins_even_from_min_to_max</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount,<sp/>denomination_wallet);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30ca03c85980db0e0a2a38e3ec9c7cb22779" kindref="member">EVEN_FROM_MAX_TO_MIN</ref>:</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1ae2c762869bfa90ebfe4b622be712dfef" kindref="member">allocate_coins_even_from_max_to_min</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount,<sp/>denomination_wallet);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30ca0b6a925c502e31e62898190767bc7c56" kindref="member">GREEDY_MIN_TO_MAX</ref>:</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1aefae3ee8d71fbba6abec7fdc18ecccf2" kindref="member">allocate_coins_greedy_min_to_max</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount,<sp/>denomination_wallet);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1af0fe808096de76ae283886fc352d685d" kindref="member">allocate_random_bills</ref>(wallet,<sp/>amount,<sp/>num_allocated_coins,<sp/>allocated_amount);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a75184a818bb804a53c156d113c6879c0" kindref="member">compare_denomination_desc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinA<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>**)a;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*coinB<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>**)b;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>&gt;<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>)<sp/>-</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(coinB-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>&lt;<sp/>coinA-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>);</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/><ref refid="coin__selection_8c_1a899a7603e11d48d74d216fbb903b9b39" kindref="member">generate_withdraw_coins</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>time,<sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>default_wallet,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*num_coins)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporary<sp/>array<sp/>for<sp/>storing<sp/>pointers<sp/>to<sp/>unique<sp/>denominations<sp/>in<sp/>the<sp/>default<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>**uniqueDenominations<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>*)<sp/>*<sp/>default_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numUnique<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>unique<sp/>denominations<sp/>(this<sp/>example<sp/>assumes<sp/>all<sp/>coins<sp/>in<sp/>default_wallet<sp/>are<sp/>unique)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>default_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniqueDenominations[numUnique++]<sp/>=<sp/>&amp;default_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>denominations<sp/>in<sp/>descending<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(uniqueDenominations,<sp/>numUnique,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>*),<sp/><ref refid="coin__selection_8c_1a75184a818bb804a53c156d113c6879c0" kindref="member">compare_denomination_desc</ref>);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*generatedCoins<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>numUnique);<sp/></highlight><highlight class="comment">//<sp/>In<sp/>worst<sp/>case,<sp/>we<sp/>use<sp/>one<sp/>of<sp/>each<sp/>denomination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!generatedCoins)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(uniqueDenominations);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>generatedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>remainingAmount<sp/>=<sp/>amount;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numUnique<sp/>&amp;&amp;<sp/>remainingAmount<sp/>&gt;<sp/>0;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remainingAmount<sp/>&gt;=<sp/>uniqueDenominations[i]-&gt;denomination.amount)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>coin<sp/>of<sp/>this<sp/>denomination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedCoins[generatedCount]<sp/>=<sp/>*(uniqueDenominations[i]);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedCoins[generatedCount].<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedCoins[generatedCount].<ref refid="struct_coin_1ae6d0eee70d99d1cdefe9705bed4e2b16" kindref="member">uniqueId</ref><sp/>=<sp/>nextUniqueId++;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainingAmount<sp/>-=<sp/>uniqueDenominations[i]-&gt;<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedCount++;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>free(uniqueDenominations);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>after<sp/>the<sp/>loop,<sp/>remainingAmount<sp/>is<sp/>not<sp/>0,<sp/>it<sp/>means<sp/>the<sp/>requested<sp/>amount<sp/>cannot<sp/>be<sp/>exactly<sp/>matched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainingAmount<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(generatedCoins);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>failure<sp/>to<sp/>generate<sp/>the<sp/>exact<sp/>amount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optionally<sp/>resize<sp/>the<sp/>generatedCoins<sp/>array<sp/>to<sp/>the<sp/>exact<sp/>number<sp/>of<sp/>generated<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>*resizedGeneratedCoins<sp/>=<sp/>realloc(generatedCoins,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>generatedCount);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!resizedGeneratedCoins)<sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(generatedCoins);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>realloc<sp/>failure<sp/>(though<sp/>this<sp/>should<sp/>be<sp/>rare)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>*num_coins<sp/>=<sp/>generatedCount;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resizedGeneratedCoins;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1aa4bd4b6b7bfd44dfece72cf6f6625549" kindref="member">add_coins_to_wallet</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref>*<sp/>wallet,<sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>coins,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_coins)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet<sp/>==<sp/>NULL<sp/>||<sp/>coins<sp/>==<sp/>NULL<sp/>||<sp/>num_coins<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>operation<sp/>if<sp/>the<sp/>input<sp/>is<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>new<sp/>size<sp/>for<sp/>the<sp/>wallet&apos;s<sp/>coins<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize<sp/>=<sp/>wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>+<sp/>num_coins;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>new<sp/>array<sp/>to<sp/>hold<sp/>both<sp/>existing<sp/>and<sp/>new<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>newCoinsArray<sp/>=<sp/>(<ref refid="struct_coin" kindref="compound">Coin</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>newSize);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newCoinsArray<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>existing<sp/>coins<sp/>to<sp/>the<sp/>new<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCoinsArray[i]<sp/>=<sp/>wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>new<sp/>coins<sp/>to<sp/>the<sp/>new<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_coins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!coins[i].uniqueId){</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coins[i].<ref refid="struct_coin_1ae6d0eee70d99d1cdefe9705bed4e2b16" kindref="member">uniqueId</ref><sp/>=<sp/>nextUniqueId++;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCoinsArray[wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>+<sp/>i]<sp/>=<sp/>coins[i];</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>free(coins);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref><sp/>=<sp/>newCoinsArray;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>=<sp/>newSize;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1a77686703b97d1b382b3960ecb14586b7" kindref="member">remove_selected_coins</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref>*<sp/>wallet,<sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>coins,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_coins)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet<sp/>==<sp/>NULL<sp/>||<sp/>wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>==<sp/>0<sp/>||<sp/>coins<sp/>==<sp/>NULL<sp/>||<sp/>num_coins<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>No<sp/>operation<sp/>if<sp/>the<sp/>input<sp/>is<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>a<sp/>new<sp/>array<sp/>to<sp/>hold<sp/>the<sp/>remaining<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>remainingCoins<sp/>=<sp/>(<ref refid="struct_coin" kindref="compound">Coin</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/>(wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>-<sp/>num_coins));</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainingCoins<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainingCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>wallet&apos;s<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isRemoved<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>current<sp/>coin<sp/>is<sp/>in<sp/>the<sp/>list<sp/>of<sp/>coins<sp/>to<sp/>be<sp/>removed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>num_coins;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ae6d0eee70d99d1cdefe9705bed4e2b16" kindref="member">uniqueId</ref><sp/>==<sp/>coins[j].uniqueId)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isRemoved<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>coin<sp/>is<sp/>not<sp/>in<sp/>the<sp/>list<sp/>of<sp/>coins<sp/>to<sp/>be<sp/>removed,<sp/>add<sp/>it<sp/>to<sp/>the<sp/>remaining<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isRemoved)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remainingCoins[remainingCount++]<sp/>=<sp/>wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>old<sp/>coins<sp/>array<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>free(coins);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>wallet<sp/>with<sp/>the<sp/>remaining<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet-&gt;<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref><sp/>=<sp/>remainingCoins;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet-&gt;<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>=<sp/>remainingCount;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1aed433e9a660b39e8fef92bb5ce8c58f2" kindref="member">calculate_total_fee</ref>(<ref refid="struct_coin" kindref="compound">Coin</ref>*<sp/>coins,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_coins,<sp/><ref refid="fee_8h_1ad99e62941c8e4b13e5fc45ecaaf65eff" kindref="member">operation_type</ref><sp/>operation)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>totalFee<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_coins;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(operation)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="fee_8h_1ad99e62941c8e4b13e5fc45ecaaf65effa42479520571fb6b2e6c7afaa1e5352c8" kindref="member">DEPOSIT_OP</ref>:</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalFee<sp/>+=<sp/>coins[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1a44c5d55964520b10a298fc10fef86d06" kindref="member">deposit_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref>;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="fee_8h_1ad99e62941c8e4b13e5fc45ecaaf65effae502eb7f083711e2333ae27f76c9ea50" kindref="member">REFUND_OP</ref>:</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalFee<sp/>+=<sp/>coins[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1a52430b50918884d38d232cbd717eea5e" kindref="member">refund_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref>;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="fee_8h_1ad99e62941c8e4b13e5fc45ecaaf65effa55976904a78ceeb73196ab4aec9562a7" kindref="member">WITHDRAW_OP</ref>:</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalFee<sp/>+=<sp/>coins[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1acf25917ea05f4c5593e6fc17c93b85dc" kindref="member">withdraw_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref>;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="fee_8h_1ad99e62941c8e4b13e5fc45ecaaf65effa60984caa8fd63e44237604975102ccbc" kindref="member">REFRESH_OP</ref>:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalFee<sp/>+=<sp/>coins[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1aa907a632d48557e7bd5dcc37ac25ddc0" kindref="member">refresh_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref>;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalFee;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="coin__selection_8c_1ad305e133b0092d3634d69bbe386a00e9" kindref="member">calculate_renew_fee</ref>(<ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>time)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>totalRenewFee<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeDifference<sp/>=<sp/>time<sp/>-<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref>;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeDifference<sp/>&gt;<sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>renewFee<sp/>=<sp/><ref refid="fee_8c_1a88ccfa80007e2dd7a5efc635c0026f12" kindref="member">calculate_fee</ref>(wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i],<sp/><ref refid="fee_8h_1ad99e62941c8e4b13e5fc45ecaaf65effa60984caa8fd63e44237604975102ccbc" kindref="member">REFRESH_OP</ref>);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1a63abbe6924977c640df75b2f40a950b0" kindref="member">creation_timestamp</ref><sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalRenewFee<sp/>+=<sp/>renewFee;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totalRenewFee;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/coin_selection.c"/>
  </compounddef>
</doxygen>
