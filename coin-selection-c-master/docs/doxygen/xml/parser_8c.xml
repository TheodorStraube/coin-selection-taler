<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="parser_8c" kind="file" language="C++">
    <compoundname>parser.c</compoundname>
    <includes refid="parser_8h" local="yes">parser.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">string.h</includes>
    <includes local="yes">cjson/cjson.h</includes>
    <incdepgraph>
      <node id="3">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/parser.c</label>
        <link refid="parser_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cjson/cjson.h</label>
      </node>
      <node id="7">
        <label>ctype.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="4">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="parser_8c_1af0f2173e3b202ddf5756531b4471dcb2" prot="public" static="no">
        <name>MAX_LINE_LENGTH</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="14" column="9" bodyfile="src/parser.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="parser_8c_1aaff00949216b5ffd1ce66cbeb00bc753" prot="public" static="no">
        <name>MAX_SECTIONS</name>
        <initializer>100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="15" column="9" bodyfile="src/parser.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="parser_8c_1aa8bad2cd89820cdaf2a7f26392774014" prot="public" static="no">
        <name>MAX_BLOCK_SIZE</name>
        <initializer>(1024 * 100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="16" column="9" bodyfile="src/parser.c" bodystart="16" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="parser_8c_1a8ea2d3113834c1fff63719b4e4693a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long time_to_seconds</definition>
        <argsstring>(const char *time_str)</argsstring>
        <name>time_to_seconds</name>
        <param>
          <type>const char *</type>
          <declname>time_str</declname>
        </param>
        <briefdescription>
<para>Convert a time string to seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The time string to convert. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of seconds represented by the time string, or -1 if the format is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="24" column="11" bodyfile="src/parser.c" bodystart="24" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="parser_8c_1a14d326782f4f0623be0fc15b9957229c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long long</type>
        <definition>long long parse_number</definition>
        <argsstring>(const char *input)</argsstring>
        <name>parse_number</name>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Parse a number from a string, removing any decimal points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string to parse. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parsed number as a long long, or -1 on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="69" column="11" bodyfile="src/parser.c" bodystart="69" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="parser_8c_1abff58decf4919821527339856b7d8960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * trim_whitespace</definition>
        <argsstring>(char *str)</argsstring>
        <name>trim_whitespace</name>
        <param>
          <type>char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Trim whitespace from the beginning and end of a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to trim. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The trimmed string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="115" column="6" bodyfile="src/parser.c" bodystart="115" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="parser_8c_1a011ce3c94234d60f48f6e52507b443fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * parse_currency_name</definition>
        <argsstring>(const char *config_data)</argsstring>
        <name>parse_currency_name</name>
        <param>
          <type>const char *</type>
          <declname>config_data</declname>
        </param>
        <briefdescription>
<para>Parse the currency name from the [taler] block in the configuration file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data as a string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parsed currency name, or NULL if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="142" column="6" bodyfile="src/parser.c" bodystart="142" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="parser_8c_1a28c62906d264c051b4d8bf51a991ffb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_coin" kindref="compound">Coin</ref></type>
        <definition>Coin parse_coin_block</definition>
        <argsstring>(const char *coin_block_data, const char *currency_name)</argsstring>
        <name>parse_coin_block</name>
        <param>
          <type>const char *</type>
          <declname>coin_block_data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>currency_name</declname>
        </param>
        <briefdescription>
<para>Parse a single coin denomination block and return a <ref refid="struct_coin" kindref="compound">Coin</ref> structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coin_block_data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data for the coin block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currency_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the currency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parsed <ref refid="struct_coin" kindref="compound">Coin</ref> structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="186" column="6" bodyfile="src/parser.c" bodystart="186" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="parser_8c_1ad292b034677f851c759c67c01d33e46e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * read_file_into_string</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>read_file_into_string</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Read the entire file content into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string containing the file content, or NULL on failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="258" column="13" bodyfile="src/parser.c" bodystart="258" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="parser_8c_1afab008579c9a802502ff76b5513a683a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
        <definition>Wallet parse_wallet_config</definition>
        <argsstring>(const char *config_path)</argsstring>
        <name>parse_wallet_config</name>
        <param>
          <type>const char *</type>
          <declname>config_path</declname>
        </param>
        <briefdescription>
<para>Parse the wallet configuration from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the configuration file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parsed <ref refid="struct_wallet" kindref="compound">Wallet</ref> structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="294" column="8" bodyfile="src/parser.c" bodystart="294" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="parser_8c_1a103ee20f9f161fb4b99e1e88fd186bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
        <definition>Wallet parse_wallet_config_json</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>parse_wallet_config_json</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Parse the JSON configuration for a wallet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the JSON configuration file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parsed <ref refid="struct_wallet" kindref="compound">Wallet</ref> structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/parser.c" line="376" column="8" bodyfile="src/parser.c" bodystart="376" bodyend="447"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>Bohdan<sp/>Potuzhnyi<sp/>and<sp/>Vlada<sp/>Svirsh<sp/>on<sp/>10.03.2024.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parser.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parser_8h" kindref="compound">parser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cjson/cjson.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>constants<sp/>for<sp/>file<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_LINE_LENGTH<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_SECTIONS<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_BLOCK_SIZE<sp/>(1024<sp/>*<sp/>100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="parser_8c_1a8ea2d3113834c1fff63719b4e4693a4c" kindref="member">time_to_seconds</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>time_str)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seconds;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>unit[20];<sp/></highlight><highlight class="comment">//<sp/>Assumes<sp/>the<sp/>longest<sp/>time<sp/>unit<sp/>string<sp/>is<sp/>less<sp/>than<sp/>20<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>time_str<sp/>to<sp/>get<sp/>the<sp/>numeric<sp/>value<sp/>and<sp/>the<sp/>time<sp/>unit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(time_str,<sp/></highlight><highlight class="stringliteral">&quot;%lld<sp/>%19s&quot;</highlight><highlight class="normal">,<sp/>&amp;value,<sp/>unit)<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>error<sp/>if<sp/>the<sp/>format<sp/>of<sp/>time_str<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>expected<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>time<sp/>format:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>time_str);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Returning<sp/>-1<sp/>to<sp/>indicate<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>time<sp/>unit<sp/>to<sp/>lowercase<sp/>for<sp/>easier<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>unit[i];<sp/>i++){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit[i]<sp/>=<sp/>tolower((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>unit[i]);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>the<sp/>unit<sp/>of<sp/>time<sp/>and<sp/>calculate<sp/>the<sp/>number<sp/>of<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;year&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;years&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>value<sp/>*<sp/>365<sp/>*<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60;<sp/></highlight><highlight class="comment">//<sp/>Simplified,<sp/>not<sp/>accounting<sp/>for<sp/>leap<sp/>years</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;week&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;weeks&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>value<sp/>*<sp/>7<sp/>*<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;day&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;days&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>value<sp/>*<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;hour&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;hours&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>value<sp/>*<sp/>60<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;minute&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;minutes&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>value<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>||<sp/>strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;seconds&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>unrecognized<sp/>unit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>time<sp/>unit:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>unit);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Returning<sp/>-1<sp/>to<sp/>indicate<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seconds;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>position<sp/>of<sp/>the<sp/>colon<sp/>in<sp/>the<sp/>input<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>colonPos<sp/>=<sp/>strchr(input,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!colonPos)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>input<sp/>format.<sp/>Colon<sp/>&apos;:&apos;<sp/>not<sp/>found.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>past<sp/>the<sp/>colon<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>numeric<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>numericPart<sp/>=<sp/>colonPos<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>there<sp/>is<sp/>a<sp/>decimal<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>decimalPointPos<sp/>=<sp/>strchr(numericPart,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>parsedNumber;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decimalPointPos)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>numeric<sp/>part<sp/>and<sp/>remove<sp/>the<sp/>decimal<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsedNumber<sp/>=<sp/>strdup(numericPart);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parsedNumber)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>decimal<sp/>point<sp/>by<sp/>shifting<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>string<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(parsedNumber<sp/>+<sp/>(decimalPointPos<sp/>-<sp/>numericPart),<sp/>decimalPointPos<sp/>+<sp/>1,<sp/>strlen(decimalPointPos));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>no<sp/>decimal<sp/>point,<sp/>just<sp/>copy<sp/>the<sp/>numeric<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsedNumber<sp/>=<sp/>strdup(numericPart);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parsedNumber)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>numeric<sp/>part<sp/>to<sp/>a<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>amount<sp/>=<sp/>atoll(parsedNumber);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>free(parsedNumber);<sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>amount;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="parser_8c_1abff58decf4919821527339856b7d8960" kindref="member">trim_whitespace</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(isspace((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*str))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str++;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*str<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>str<sp/>+<sp/>strlen(str)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(end<sp/>&gt;<sp/>str<sp/>&amp;&amp;<sp/>isspace((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)*end))<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end--;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>*(end<sp/>+<sp/>1)<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="parser_8c_1a011ce3c94234d60f48f6e52507b443fd" kindref="member">parse_currency_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>config_data)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>taler_block_start<sp/>=<sp/>strstr(config_data,<sp/></highlight><highlight class="stringliteral">&quot;[taler]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(taler_block_start<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line_start<sp/>=<sp/>taler_block_start;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((line_start<sp/>=<sp/>strstr(line_start,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>past<sp/>the<sp/>newline<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_start++;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>next<sp/>newline<sp/>to<sp/>isolate<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line_end<sp/>=<sp/>strstr(line_start,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_end<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>the<sp/>file<sp/>reached<sp/>without<sp/>finding<sp/>a<sp/>complete<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>line<sp/>into<sp/>a<sp/>temporary<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line_length<sp/>=<sp/>line_end<sp/>-<sp/>line_start;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line_buffer<sp/>=<sp/>malloc(line_length<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(line_buffer,<sp/>line_start,<sp/>line_length);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_buffer[line_length]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>line<sp/>contains<sp/>the<sp/>currency<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(line_buffer,<sp/></highlight><highlight class="stringliteral">&quot;CURRENCY<sp/>=&quot;</highlight><highlight class="normal">,<sp/>10)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>currency_name<sp/>=<sp/><ref refid="parser_8c_1abff58decf4919821527339856b7d8960" kindref="member">trim_whitespace</ref>(line_buffer<sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>currency_name;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(line_buffer);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Currency<sp/>name<sp/>was<sp/>not<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><ref refid="struct_coin" kindref="compound">Coin</ref><sp/><ref refid="parser_8c_1a28c62906d264c051b4d8bf51a991ffb5" kindref="member">parse_coin_block</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>coin_block_data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>currency_name)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>coin<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a85c67d0737b73c9a2a35adf3e71f9ddd" kindref="member">cipher</ref><sp/>=<sp/>strdup(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>an<sp/>empty<sp/>string<sp/>as<sp/>a<sp/>placeholder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a112d9163c54b55ac4b0cc99da3b38f6f" kindref="member">name</ref><sp/>=<sp/>strdup(currency_name);<sp/></highlight><highlight class="comment">//<sp/>Set<sp/>currency<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Temporary<sp/>storage<sp/>for<sp/>duration<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>legal_duration_str[<ref refid="parser_8c_1af0f2173e3b202ddf5756531b4471dcb2" kindref="member">MAX_LINE_LENGTH</ref>]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>spend_duration_str[<ref refid="parser_8c_1af0f2173e3b202ddf5756531b4471dcb2" kindref="member">MAX_LINE_LENGTH</ref>]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>withdraw_duration_str[<ref refid="parser_8c_1af0f2173e3b202ddf5756531b4471dcb2" kindref="member">MAX_LINE_LENGTH</ref>]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tokenize<sp/>the<sp/>block<sp/>into<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dataCopy[<ref refid="parser_8c_1aa8bad2cd89820cdaf2a7f26392774014" kindref="member">MAX_BLOCK_SIZE</ref>];<sp/></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>statically<sp/>sized<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(dataCopy,<sp/>coin_block_data,<sp/><ref refid="parser_8c_1aa8bad2cd89820cdaf2a7f26392774014" kindref="member">MAX_BLOCK_SIZE</ref>);<sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>coin<sp/>block<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>dataCopy[<ref refid="parser_8c_1aa8bad2cd89820cdaf2a7f26392774014" kindref="member">MAX_BLOCK_SIZE</ref><sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>null<sp/>termination.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rest<sp/>=<sp/>dataCopy;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((line<sp/>=<sp/>strtok_r(rest,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">,<sp/>&amp;rest)))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="parser_8c_1abff58decf4919821527339856b7d8960" kindref="member">trim_whitespace</ref>(line);<sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>the<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>key-value<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>subrest<sp/>=<sp/>line;<sp/></highlight><highlight class="comment">//<sp/>Use<sp/>subrest<sp/>for<sp/>the<sp/>inner<sp/>parsing<sp/>of<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>strtok_r(subrest,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">,<sp/>&amp;subrest);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>subrest;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/><ref refid="parser_8c_1abff58decf4919821527339856b7d8960" kindref="member">trim_whitespace</ref>(key);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/><ref refid="parser_8c_1abff58decf4919821527339856b7d8960" kindref="member">trim_whitespace</ref>(value);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;rsa_keysize&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1aab09e5a79e0b60a591fa27f1d99cb2a1" kindref="member">rsa_keysize</ref><sp/>=<sp/>atoi(value);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;fee_deposit&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1a44c5d55964520b10a298fc10fef86d06" kindref="member">deposit_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(value);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;fee_refund&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1a52430b50918884d38d232cbd717eea5e" kindref="member">refund_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(value);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;fee_withdraw&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1acf25917ea05f4c5593e6fc17c93b85dc" kindref="member">withdraw_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(value);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;fee_refresh&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1aa907a632d48557e7bd5dcc37ac25ddc0" kindref="member">refresh_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(value);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;duration_legal&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(legal_duration_str,<sp/>value,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(legal_duration_str)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;duration_spend&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(spend_duration_str,<sp/>value,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(spend_duration_str)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;duration_withdraw&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(withdraw_duration_str,<sp/>value,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(withdraw_duration_str)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(value);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(key,<sp/></highlight><highlight class="stringliteral">&quot;cipher&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a85c67d0737b73c9a2a35adf3e71f9ddd" kindref="member">cipher</ref>);<sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>placeholder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a85c67d0737b73c9a2a35adf3e71f9ddd" kindref="member">cipher</ref><sp/>=<sp/>strdup(value);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>duration<sp/>strings<sp/>to<sp/>seconds<sp/>and<sp/>set<sp/>in<sp/>the<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>=<sp/><ref refid="parser_8c_1a8ea2d3113834c1fff63719b4e4693a4c" kindref="member">time_to_seconds</ref>(legal_duration_str);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a5ed07ad99f37c466794edb9291be5570" kindref="member">deposit</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>=<sp/><ref refid="parser_8c_1a8ea2d3113834c1fff63719b4e4693a4c" kindref="member">time_to_seconds</ref>(spend_duration_str);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a58d9b0d9165f2d7df77a4e3276a4c387" kindref="member">withdraw</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>=<sp/><ref refid="parser_8c_1a8ea2d3113834c1fff63719b4e4693a4c" kindref="member">time_to_seconds</ref>(withdraw_duration_str);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coin;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>read_file_into_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(file,<sp/>0L,<sp/>SEEK_END)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bufsize<sp/>=<sp/>ftell(file);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bufsize<sp/>==<sp/>-1)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>our<sp/>buffer<sp/>to<sp/>that<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>*<sp/>(bufsize<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Go<sp/>back<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(file,<sp/>0L,<sp/>SEEK_SET)<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>entire<sp/>file<sp/>into<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newLen<sp/>=<sp/>fread(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>bufsize,<sp/>file);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newLen<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[newLen++]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Just<sp/>to<sp/>be<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/><ref refid="parser_8c_1afab008579c9a802502ff76b5513a683a" kindref="member">parse_wallet_config</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>config_path)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/><ref refid="parser_8c_1aaff00949216b5ffd1ce66cbeb00bc753" kindref="member">MAX_SECTIONS</ref>);<sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>space<sp/>for<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Start<sp/>with<sp/>zero<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>coins.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wallet;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_content<sp/>=<sp/>read_file_into_string(config_path);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file_content)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>error:<sp/>could<sp/>not<sp/>read<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read<sp/>file<sp/>content.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wallet;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>currency_name<sp/>=<sp/><ref refid="parser_8c_1a011ce3c94234d60f48f6e52507b443fd" kindref="member">parse_currency_name</ref>(file_content);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currency_name)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Currency<sp/>name<sp/>not<sp/>found.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(file_content);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wallet;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(config_path,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_wallet" kindref="compound">Wallet</ref>){0};<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>an<sp/>empty<sp/>wallet<sp/>struct<sp/>on<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>[coins...]<sp/>block<sp/>to<sp/>get<sp/>the<sp/>coins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[<ref refid="parser_8c_1af0f2173e3b202ddf5756531b4471dcb2" kindref="member">MAX_LINE_LENGTH</ref>];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>current_block[<ref refid="parser_8c_1af0f2173e3b202ddf5756531b4471dcb2" kindref="member">MAX_LINE_LENGTH</ref><sp/>*<sp/>100]<sp/>=<sp/>{0};<sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>for<sp/>current<sp/>coin<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isCoinBlockActive<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>emptyLineCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(line,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(line),<sp/>file))<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>trailing<sp/>newline<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[strcspn(line,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(line,<sp/></highlight><highlight class="stringliteral">&quot;[coin_&quot;</highlight><highlight class="normal">,<sp/>6)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>of<sp/>a<sp/>new<sp/>coin<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isCoinBlockActive<sp/>&amp;&amp;<sp/>strlen(current_block)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>previous<sp/>coin<sp/>block<sp/>if<sp/>we&apos;re<sp/>already<sp/>inside<sp/>a<sp/>coin<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>++]<sp/>=<sp/><ref refid="parser_8c_1a28c62906d264c051b4d8bf51a991ffb5" kindref="member">parse_coin_block</ref>(current_block,<sp/>currency_name);<sp/></highlight><highlight class="comment">//<sp/>Placeholder<sp/>for<sp/>currency_name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(current_block,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(current_block));<sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>block<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isCoinBlockActive<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>that<sp/>we&apos;re<sp/>inside<sp/>a<sp/>coin<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emptyLineCount<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>empty<sp/>line<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(current_block,<sp/>line);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(current_block,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(line,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>isCoinBlockActive)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>empty<sp/>line<sp/>within<sp/>a<sp/>coin<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emptyLineCount++;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(emptyLineCount<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>consecutive<sp/>empty<sp/>lines<sp/>indicate<sp/>the<sp/>end<sp/>of<sp/>coin<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Exit<sp/>the<sp/>loop<sp/>to<sp/>stop<sp/>parsing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isCoinBlockActive)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>within<sp/>a<sp/>coin<sp/>block<sp/>and<sp/>line<sp/>is<sp/>not<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>emptyLineCount<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>empty<sp/>line<sp/>count<sp/>as<sp/>we<sp/>have<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(current_block,<sp/>line);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(current_block,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>the<sp/>last<sp/>coin<sp/>block<sp/>if<sp/>not<sp/>already<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isCoinBlockActive<sp/>&amp;&amp;<sp/>strlen(current_block)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>++]<sp/>=<sp/><ref refid="parser_8c_1a28c62906d264c051b4d8bf51a991ffb5" kindref="member">parse_coin_block</ref>(current_block,<sp/>currency_name);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wallet;<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>populated<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/><ref refid="parser_8c_1a103ee20f9f161fb4b99e1e88fd186bc0" kindref="member">parse_wallet_config_json</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data<sp/>=<sp/>read_file_into_string(filename);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!data)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>read<sp/>the<sp/>JSON<sp/>configuration<sp/>file.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_wallet" kindref="compound">Wallet</ref>){0};<sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>an<sp/>empty<sp/>Wallet<sp/>on<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON<sp/>*json<sp/>=<sp/>cJSON_Parse(data);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!json)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>JSON<sp/>before:<sp/>[%s]\n&quot;</highlight><highlight class="normal">,<sp/>cJSON_GetErrorPtr());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="struct_wallet" kindref="compound">Wallet</ref>){0};</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>currency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*currency_name<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(json,<sp/></highlight><highlight class="stringliteral">&quot;currency&quot;</highlight><highlight class="normal">)-&gt;valuestring;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>wallet;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref><sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_coin" kindref="compound">Coin</ref>)<sp/>*<sp/><ref refid="parser_8c_1aaff00949216b5ffd1ce66cbeb00bc753" kindref="member">MAX_SECTIONS</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON<sp/>*denominations<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(json,<sp/></highlight><highlight class="stringliteral">&quot;denominations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON<sp/>*denom;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_ArrayForEach(denom,<sp/>denominations)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>&gt;=<sp/><ref refid="parser_8c_1aaff00949216b5ffd1ce66cbeb00bc753" kindref="member">MAX_SECTIONS</ref>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_coin" kindref="compound">Coin</ref><sp/>coin<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a112d9163c54b55ac4b0cc99da3b38f6f" kindref="member">name</ref><sp/>=<sp/>strdup(currency_name);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>various<sp/>fields<sp/>from<sp/>each<sp/>denomination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*value<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom,<sp/></highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(value-&gt;valuestring);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*fee_withdraw<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom,<sp/></highlight><highlight class="stringliteral">&quot;fee_withdraw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1acf25917ea05f4c5593e6fc17c93b85dc" kindref="member">withdraw_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(fee_withdraw-&gt;valuestring);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*fee_deposit<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom,<sp/></highlight><highlight class="stringliteral">&quot;fee_deposit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1a44c5d55964520b10a298fc10fef86d06" kindref="member">deposit_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(fee_deposit-&gt;valuestring);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*fee_refresh<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom,<sp/></highlight><highlight class="stringliteral">&quot;fee_refresh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1aa907a632d48557e7bd5dcc37ac25ddc0" kindref="member">refresh_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(fee_refresh-&gt;valuestring);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*fee_refund<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom,<sp/></highlight><highlight class="stringliteral">&quot;fee_refund&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1a52430b50918884d38d232cbd717eea5e" kindref="member">refund_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref><sp/>=<sp/><ref refid="parser_8c_1a14d326782f4f0623be0fc15b9957229c" kindref="member">parse_number</ref>(fee_refund-&gt;valuestring);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*cipher<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom,<sp/></highlight><highlight class="stringliteral">&quot;cipher&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a85c67d0737b73c9a2a35adf3e71f9ddd" kindref="member">cipher</ref><sp/>=<sp/>strdup(cipher-&gt;valuestring);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*denoms_from_denom<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom,<sp/></highlight><highlight class="stringliteral">&quot;denoms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*denom_item_first<sp/>=<sp/>cJSON_GetArrayItem(denoms_from_denom,<sp/>0);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_start<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom_item_first,<sp/></highlight><highlight class="stringliteral">&quot;stamp_start&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_start_t_s<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(stamp_start,<sp/></highlight><highlight class="stringliteral">&quot;t_s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_expire_withdraw<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom_item_first,<sp/></highlight><highlight class="stringliteral">&quot;stamp_expire_withdraw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_expire_withdraw_t_s<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(stamp_expire_withdraw,<sp/></highlight><highlight class="stringliteral">&quot;t_s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a58d9b0d9165f2d7df77a4e3276a4c387" kindref="member">withdraw</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>=<sp/>stamp_expire_withdraw_t_s-&gt;valueint<sp/>-<sp/>stamp_start_t_s-&gt;valueint;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_expire_deposit<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom_item_first,<sp/></highlight><highlight class="stringliteral">&quot;stamp_expire_deposit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_expire_deposit_t_s<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(stamp_expire_deposit,<sp/></highlight><highlight class="stringliteral">&quot;t_s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a5ed07ad99f37c466794edb9291be5570" kindref="member">deposit</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>=<sp/>stamp_expire_deposit_t_s-&gt;valueint<sp/>-<sp/>stamp_start_t_s-&gt;valueint;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_expire_legal<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(denom_item_first,<sp/></highlight><highlight class="stringliteral">&quot;stamp_expire_legal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cJSON<sp/>*stamp_expire_legal_t_s<sp/>=<sp/>cJSON_GetObjectItemCaseSensitive(stamp_expire_legal,<sp/></highlight><highlight class="stringliteral">&quot;t_s&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coin.<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a17d3fa3d79c077e4c5e94b00c3e240cb" kindref="member">durations</ref>.<ref refid="struct_durations_1a3bedff428786edeb6c3af24f5141c087" kindref="member">legal</ref>.<ref refid="struct_duration_1a3553115b7e06d0480a1d78e9bd01e84e" kindref="member">time</ref><sp/>=<sp/>stamp_expire_legal_t_s-&gt;valueint<sp/>-<sp/>stamp_start_t_s-&gt;valueint;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>++]<sp/>=<sp/>coin;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>cJSON_Delete(json);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wallet;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/parser.c"/>
  </compounddef>
</doxygen>
