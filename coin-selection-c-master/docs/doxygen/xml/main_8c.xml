<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">pthread.h</includes>
    <includes local="no">semaphore.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes refid="fee_8h" local="yes">fee.h</includes>
    <includes refid="parser_8h" local="yes">parser.h</includes>
    <includes refid="user_8h" local="yes">user.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes refid="generator_8h" local="yes">generator.h</includes>
    <includes refid="simulation_8h" local="yes">simulation.h</includes>
    <includes local="yes">../src/cjson/cjson.h</includes>
    <incdepgraph>
      <node id="19">
        <label>../src/cjson/cjson.h</label>
      </node>
      <node id="18">
        <label>coin_selection.h</label>
        <link refid="coin__selection_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>fee.h</label>
        <link refid="fee_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>generator.h</label>
        <link refid="generator_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>simulation.h</label>
        <link refid="simulation_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>user.h</label>
        <link refid="user_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/main.c</label>
        <link refid="main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>dirent.h</label>
      </node>
      <node id="8">
        <label>fcntl.h</label>
      </node>
      <node id="6">
        <label>pthread.h</label>
      </node>
      <node id="7">
        <label>semaphore.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="10">
        <label>sys/stat.h</label>
      </node>
      <node id="13">
        <label>time.h</label>
      </node>
      <node id="9">
        <label>unistd.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="main_8c_1a8b5173357adb02a86c027316e0acdfa0" prot="public" static="no">
        <name>MAX_THREADS</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="18" column="9" bodyfile="src/main.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1ae5947dba4048acd3bf0b609cc1377d86" prot="public" static="no">
        <name>USER_NAME_MAX_LENGTH</name>
        <initializer>50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="19" column="9" bodyfile="src/main.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8c_1af4994f9a596e6e5b30491a58cbf07f44" prot="public" static="no">
        <name>SEMAPHORE_NAME</name>
        <initializer>&quot;/semaphore&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="20" column="9" bodyfile="src/main.c" bodystart="20" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" prot="public" static="no" mutable="no">
        <type>sem_t *</type>
        <definition>sem_t* semaphore</definition>
        <argsstring></argsstring>
        <name>semaphore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="22" column="7" bodyfile="src/main.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ac4bef3984b07b68ad586b3109e528f47" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int total_files</definition>
        <argsstring></argsstring>
        <name>total_files</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="23" column="5" bodyfile="src/main.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int processed_files</definition>
        <argsstring></argsstring>
        <name>processed_files</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="24" column="5" bodyfile="src/main.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ad20e89e0c86aa812dc3a8e2fb7b5777b" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t start_time</definition>
        <argsstring></argsstring>
        <name>start_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="25" column="8" bodyfile="src/main.c" bodystart="25" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="main_8c_1adb4d35502910ed2345043500a5a52f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_progress</definition>
        <argsstring>()</argsstring>
        <name>update_progress</name>
        <briefdescription>
<para>Update the progress of file processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="30" column="6" bodyfile="src/main.c" bodystart="30" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a309b922d137c4797f2d53760d8258319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int count_files_in_directory</definition>
        <argsstring>(const char *directory_path)</argsstring>
        <name>count_files_in_directory</name>
        <param>
          <type>const char *</type>
          <declname>directory_path</declname>
        </param>
        <briefdescription>
<para>Count the number of files in a directory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the directory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of files in the directory. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="47" column="5" bodyfile="src/main.c" bodystart="47" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a1cd7402f55b1cf690217cf755767f746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clear_directory</definition>
        <argsstring>(const char *directory_path)</argsstring>
        <name>clear_directory</name>
        <param>
          <type>const char *</type>
          <declname>directory_path</declname>
        </param>
        <briefdescription>
<para>Clear all files in a directory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the directory to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="69" column="6" bodyfile="src/main.c" bodystart="69" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a98358ad2346ec19f79a334556f628711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void simulate_actions_from_file</definition>
        <argsstring>(const char *filepath, Wallet denomination_wallet)</argsstring>
        <name>simulate_actions_from_file</name>
        <param>
          <type>const char *</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>denomination_wallet</declname>
        </param>
        <briefdescription>
<para>Simulate actions from a file for a given wallet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filepath</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the file containing actions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denomination_wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet with coin denominations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="96" column="6" bodyfile="src/main.c" bodystart="96" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a6ac9570fad24030ea7da53044f1d4951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * thread_function</definition>
        <argsstring>(void *arg)</argsstring>
        <name>thread_function</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Thread function to simulate actions from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments for the thread, including the file path and wallet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="156" column="6" bodyfile="src/main.c" bodystart="156" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a72ffc7e91caee9de5ceeca65ee5d18f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void load_and_simulate_actions</definition>
        <argsstring>(const char *base_dir, Wallet denomination_wallet)</argsstring>
        <name>load_and_simulate_actions</name>
        <param>
          <type>const char *</type>
          <declname>base_dir</declname>
        </param>
        <param>
          <type><ref refid="struct_wallet" kindref="compound">Wallet</ref></type>
          <declname>denomination_wallet</declname>
        </param>
        <briefdescription>
<para>Load and simulate actions from all files in a directory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The base directory containing the files. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denomination_wallet</parametername>
</parameternamelist>
<parameterdescription>
<para>The wallet with coin denominations. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="179" column="6" bodyfile="src/main.c" bodystart="179" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a633b4a4cf7b19081107ddf04a5dc03b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void check_and_prepare_directory</definition>
        <argsstring>(const char *dir_path)</argsstring>
        <name>check_and_prepare_directory</name>
        <param>
          <type>const char *</type>
          <declname>dir_path</declname>
        </param>
        <briefdescription>
<para>Check if a directory exists and create it if it does not. If it exists, clear its contents. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dir_path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the directory. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="230" column="6" bodyfile="src/main.c" bodystart="230" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.c" line="243" column="5" bodyfile="src/main.c" bodystart="243" bodyend="306"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dirent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;semaphore.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fee_8h" kindref="compound">fee.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parser_8h" kindref="compound">parser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="user_8h" kindref="compound">user.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="generator_8h" kindref="compound">generator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="simulation_8h" kindref="compound">simulation.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/cjson/cjson.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_THREADS<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USER_NAME_MAX_LENGTH<sp/>50</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SEMAPHORE_NAME<sp/>&quot;/semaphore&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">sem_t*<sp/><ref refid="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" kindref="member">semaphore</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8c_1ac4bef3984b07b68ad586b3109e528f47" kindref="member">total_files</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" kindref="member">processed_files</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">time_t<sp/><ref refid="main_8c_1ad20e89e0c86aa812dc3a8e2fb7b5777b" kindref="member">start_time</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1adb4d35502910ed2345043500a5a52f59" kindref="member">update_progress</ref>()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elapsed<sp/>=<sp/>difftime(time(NULL),<sp/><ref refid="main_8c_1ad20e89e0c86aa812dc3a8e2fb7b5777b" kindref="member">start_time</ref>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg_time_per_file<sp/>=<sp/>elapsed<sp/>/<sp/><ref refid="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" kindref="member">processed_files</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining_files<sp/>=<sp/><ref refid="main_8c_1ac4bef3984b07b68ad586b3109e528f47" kindref="member">total_files</ref><sp/>-<sp/><ref refid="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" kindref="member">processed_files</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>est_time_remaining<sp/>=<sp/>avg_time_per_file<sp/>*<sp/>remaining_files;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//system(&quot;clear&quot;);<sp/>//<sp/>Clear<sp/>the<sp/>terminal<sp/>(use<sp/>&quot;cls&quot;<sp/>on<sp/>Windows)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Processing<sp/>progress:<sp/>%d/%d<sp/>files\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" kindref="member">processed_files</ref>,<sp/><ref refid="main_8c_1ac4bef3984b07b68ad586b3109e528f47" kindref="member">total_files</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Estimated<sp/>time<sp/>remaining:<sp/>%.2f<sp/>seconds\n&quot;</highlight><highlight class="normal">,<sp/>est_time_remaining);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a309b922d137c4797f2d53760d8258319" kindref="member">count_files_in_directory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>directory_path)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>DIR*<sp/>dir<sp/>=<sp/>opendir(directory_path);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent*<sp/>entry;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>directory<sp/>to<sp/>count<sp/>files&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((entry<sp/>=<sp/>readdir(dir))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;d_type<sp/>==<sp/>DT_REG)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_count++;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>closedir(dir);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_count;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a1cd7402f55b1cf690217cf755767f746" kindref="member">clear_directory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*directory_path)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>DIR<sp/>*dir<sp/>=<sp/>opendir(directory_path);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>directory<sp/>for<sp/>clearing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*entry;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((entry<sp/>=<sp/>readdir(dir))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entry-&gt;d_type<sp/>==<sp/>DT_REG)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>it<sp/>is<sp/>a<sp/>regular<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filepath[1024];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(filepath,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>directory_path,<sp/>entry-&gt;d_name);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove(filepath)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>delete<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>closedir(dir);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a98358ad2346ec19f79a334556f628711" kindref="member">simulate_actions_from_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filepath,<sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>denomination_wallet)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>fopen(filepath,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>determine<sp/>the<sp/>number<sp/>of<sp/>lines<sp/>to<sp/>allocate<sp/>memory<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[1024];</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>file))<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line_count++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_count<sp/>&lt;=<sp/>1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Only<sp/>the<sp/>header<sp/>line<sp/>or<sp/>empty<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>actions<sp/>based<sp/>on<sp/>line<sp/>count<sp/>minus<sp/>one<sp/>for<sp/>the<sp/>user<sp/>info<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_action" kindref="compound">Action</ref><sp/>*actions<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_action" kindref="compound">Action</ref>)<sp/>*<sp/>(line_count<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!actions)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Memory<sp/>allocation<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>rewind(file);<sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>file<sp/>pointer<sp/>to<sp/>the<sp/>beginning<sp/>to<sp/>read<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>first<sp/>line<sp/>to<sp/>parse<sp/>user<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fgets(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>file)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(actions);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_user" kindref="compound">User</ref><sp/>user;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>user.<ref refid="struct_user_1a829fa9c7710707548005c76f41340d77" kindref="member">name</ref><sp/>=<sp/>malloc(<ref refid="main_8c_1ae5947dba4048acd3bf0b609cc1377d86" kindref="member">USER_NAME_MAX_LENGTH</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>user_index,<sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30c" kindref="member">strategy</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>sscanf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%[^,],%d,%d,%d&quot;</highlight><highlight class="normal">,<sp/>user.<ref refid="struct_user_1a829fa9c7710707548005c76f41340d77" kindref="member">name</ref>,<sp/>&amp;user.<ref refid="struct_user_1a5ba9303794761fdf8ac15fefc0657722" kindref="member">type</ref>,<sp/>&amp;<ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30c" kindref="member">strategy</ref>,<sp/>&amp;user_index);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>actions<sp/>from<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_actions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>file)<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>num_actions<sp/>&lt;<sp/>line_count<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%d,%lld,%lld&quot;</highlight><highlight class="normal">,<sp/>&amp;actions[num_actions].operation,<sp/>&amp;actions[num_actions].amount,<sp/>&amp;actions[num_actions].time);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_actions++;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>user.<ref refid="struct_user_1a25e9f9dbd5139953f11eda3548d6c953" kindref="member">actions</ref><sp/>=<sp/>actions;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="simulation_8c_1aaa133f689d59c184ad7f88e19180a73c" kindref="member">simulate_user_actions</ref>(user_index,<sp/>user,<sp/>denomination_wallet,<sp/>num_actions,<sp/><ref refid="coin__selection_8h_1ab621d71bb2cf38b09419ef3a5047e30c" kindref="member">strategy</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="main_8c_1a6ac9570fad24030ea7da53044f1d4951" kindref="member">thread_function</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_thread_args" kindref="compound">ThreadArgs</ref>*<sp/>args<sp/>=<sp/>(<ref refid="struct_thread_args" kindref="compound">ThreadArgs</ref>*)arg;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a98358ad2346ec19f79a334556f628711" kindref="member">simulate_actions_from_file</ref>(args-&gt;<ref refid="struct_thread_args_1a1593fa4ed6db5a41dafdc72d5947051a" kindref="member">filepath</ref>,<sp/>args-&gt;<ref refid="struct_thread_args_1ab057b012055d3a72fc6c124166f1f197" kindref="member">denomination_wallet</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>sem_post(<ref refid="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" kindref="member">semaphore</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>file<sp/>after<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remove(args-&gt;<ref refid="struct_thread_args_1a1593fa4ed6db5a41dafdc72d5947051a" kindref="member">filepath</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>delete<sp/>processed<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>free(arg);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_fetch_and_add(&amp;<ref refid="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" kindref="member">processed_files</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1adb4d35502910ed2345043500a5a52f59" kindref="member">update_progress</ref>();</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a72ffc7e91caee9de5ceeca65ee5d18f7" kindref="member">load_and_simulate_actions</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base_dir,<sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>denomination_wallet)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>DIR<sp/>*dir;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dirent<sp/>*entry;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1ac4bef3984b07b68ad586b3109e528f47" kindref="member">total_files</ref><sp/>=<sp/><ref refid="main_8c_1a309b922d137c4797f2d53760d8258319" kindref="member">count_files_in_directory</ref>(base_dir);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" kindref="member">processed_files</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1ad20e89e0c86aa812dc3a8e2fb7b5777b" kindref="member">start_time</ref><sp/>=<sp/>time(NULL);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dir<sp/>=<sp/>opendir(base_dir))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>directory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((entry<sp/>=<sp/>readdir(dir))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(entry-&gt;d_name,<sp/></highlight><highlight class="stringliteral">&quot;.csv&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filepath[1024];</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(filepath,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>base_dir,<sp/>entry-&gt;d_name);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sem_wait(<ref refid="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" kindref="member">semaphore</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_t<sp/>thread;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_thread_args" kindref="compound">ThreadArgs</ref>*<sp/>args<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_thread_args" kindref="compound">ThreadArgs</ref>));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>thread<sp/>args&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="struct_thread_args_1a1593fa4ed6db5a41dafdc72d5947051a" kindref="member">filepath</ref><sp/>=<sp/>strdup(filepath);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;<ref refid="struct_thread_args_1ab057b012055d3a72fc6c124166f1f197" kindref="member">denomination_wallet</ref><sp/>=<sp/>denomination_wallet;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;thread,<sp/>NULL,<sp/><ref refid="main_8c_1a6ac9570fad24030ea7da53044f1d4951" kindref="member">thread_function</ref>,<sp/>args)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(args);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sem_post(<ref refid="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" kindref="member">semaphore</ref>);<sp/></highlight><highlight class="comment">//<sp/>Release<sp/>the<sp/>semaphore<sp/>if<sp/>thread<sp/>creation<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_detach(thread);<sp/></highlight><highlight class="comment">//<sp/>Detach<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>closedir(dir);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="main_8c_1aa32cbd8deb9f85ba3a9b1810163080cc" kindref="member">processed_files</ref><sp/>&lt;<sp/><ref refid="main_8c_1ac4bef3984b07b68ad586b3109e528f47" kindref="member">total_files</ref>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep(1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a633b4a4cf7b19081107ddf04a5dc03b7" kindref="member">check_and_prepare_directory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir_path)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>st<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat(dir_path,<sp/>&amp;st)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mkdir(dir_path,<sp/>0700)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>directory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8c_1a1cd7402f55b1cf690217cf755767f746" kindref="member">clear_directory</ref>(dir_path);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_users<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_users<sp/>=<sp/>atoi(argv[1]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_users<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>users<sp/>must<sp/>be<sp/>a<sp/>positive<sp/>integer.<sp/>Using<sp/>default:<sp/>100\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_users<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(21);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a633b4a4cf7b19081107ddf04a5dc03b7" kindref="member">check_and_prepare_directory</ref>(</highlight><highlight class="stringliteral">&quot;../simulation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a633b4a4cf7b19081107ddf04a5dc03b7" kindref="member">check_and_prepare_directory</ref>(</highlight><highlight class="stringliteral">&quot;../simulation/users&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a633b4a4cf7b19081107ddf04a5dc03b7" kindref="member">check_and_prepare_directory</ref>(</highlight><highlight class="stringliteral">&quot;../simulation/results&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a1cd7402f55b1cf690217cf755767f746" kindref="member">clear_directory</ref>(</highlight><highlight class="stringliteral">&quot;../simulation/users&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a1cd7402f55b1cf690217cf755767f746" kindref="member">clear_directory</ref>(</highlight><highlight class="stringliteral">&quot;../simulation/results&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>sem_unlink(<ref refid="main_8c_1af4994f9a596e6e5b30491a58cbf07f44" kindref="member">SEMAPHORE_NAME</ref>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" kindref="member">semaphore</ref><sp/>=<sp/>sem_open(<ref refid="main_8c_1af4994f9a596e6e5b30491a58cbf07f44" kindref="member">SEMAPHORE_NAME</ref>,<sp/>O_CREAT,<sp/>0644,<sp/><ref refid="main_8c_1a8b5173357adb02a86c027316e0acdfa0" kindref="member">MAX_THREADS</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" kindref="member">semaphore</ref><sp/>==<sp/>SEM_FAILED)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>semaphore&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>METHOD<sp/>1:<sp/>Parse<sp/>with<sp/>txt<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>const<sp/>char*<sp/>config_filename<sp/>=<sp/>&quot;../data/taler.conf&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Wallet<sp/>denomination_wallet<sp/>=<sp/>parse_wallet_config(config_filename);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>METHOD<sp/>2:<sp/>Parse<sp/>with<sp/>json<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>config_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;../data/keys.json&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_wallet" kindref="compound">Wallet</ref><sp/>denomination_wallet<sp/>=<sp/><ref refid="parser_8c_1a103ee20f9f161fb4b99e1e88fd186bc0" kindref="member">parse_wallet_config_json</ref>(config_path);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denomination_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Loaded<sp/>%d<sp/>coins<sp/>from<sp/>configuration.\n&quot;</highlight><highlight class="normal">,<sp/>denomination_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>denomination_wallet.<ref refid="struct_wallet_1a291291b3fb8c613d4abca33f1729f8b1" kindref="member">num_coins</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Coin<sp/>%d:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>i+1,<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a112d9163c54b55ac4b0cc99da3b38f6f" kindref="member">name</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Amount:<sp/>%lld<sp/>satoshis\n&quot;</highlight><highlight class="normal">,<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a3401e942b5bf04ce804e3194d9ea5b4f" kindref="member">amount</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Withdraw<sp/>Fee:<sp/>%lld<sp/>satoshis\n&quot;</highlight><highlight class="normal">,<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1acf25917ea05f4c5593e6fc17c93b85dc" kindref="member">withdraw_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Refresh<sp/>Fee:<sp/>%lld<sp/>satoshis\n&quot;</highlight><highlight class="normal">,<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1aa907a632d48557e7bd5dcc37ac25ddc0" kindref="member">refresh_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Deposit<sp/>Fee:<sp/>%lld<sp/>satoshis\n&quot;</highlight><highlight class="normal">,<sp/>denomination_wallet.<ref refid="struct_wallet_1a2375e4e1b39dc606905825c5fe51cc79" kindref="member">coins</ref>[i].<ref refid="struct_coin_1ab0c85f7b3d00334d79c11b7d273d140b" kindref="member">denomination</ref>.<ref refid="struct_denomination_1a35d9354ba80e33cf21ae91aad752710f" kindref="member">rules</ref>.<ref refid="struct_rules_1a1dc0e2b254659abe7d8a2fbf54884e95" kindref="member">fees</ref>.<ref refid="struct_fees_1a44c5d55964520b10a298fc10fef86d06" kindref="member">deposit_fee</ref>.<ref refid="struct_fee_1a90d978b7ef183143fae9041924235ba1" kindref="member">fee_satoshis</ref>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>coins<sp/>were<sp/>loaded<sp/>from<sp/>the<sp/>configuration<sp/>file.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>END<sp/>OF<sp/>PARSING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NEW<sp/>METHOD<sp/>OF<sp/>GENERATING<sp/>ACTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="generator_8c_1a312c3bab9752bd1ddeabe8e49ebfbac4" kindref="member">generate_and_save_actions</ref>(</highlight><highlight class="stringliteral">&quot;../simulation/users&quot;</highlight><highlight class="normal">,<sp/>num_users);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>and<sp/>simulate<sp/>actions<sp/>from<sp/>the<sp/>generated<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8c_1a72ffc7e91caee9de5ceeca65ee5d18f7" kindref="member">load_and_simulate_actions</ref>(</highlight><highlight class="stringliteral">&quot;../simulation/users&quot;</highlight><highlight class="normal">,<sp/>denomination_wallet);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>and<sp/>unlink<sp/>the<sp/>semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>sem_close(<ref refid="main_8c_1a7797f53c8b5ff07cfb56d1a0d1bb42af" kindref="member">semaphore</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>sem_unlink(<ref refid="main_8c_1af4994f9a596e6e5b30491a58cbf07f44" kindref="member">SEMAPHORE_NAME</ref>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/main.c"/>
  </compounddef>
</doxygen>
